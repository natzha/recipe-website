{"mappings":"ACEA,eAAe,EAAe,CAAU,EACpC,IAAI,EACJ,GAAI,CACA,IAAM,EAAW,MAAM,MAAM,GAC7B,GAAI,CAAC,EAAS,EAAE,CACZ,MAAM,AAAI,MAAM,gCAEpB,EAAa,MAAM,EAAS,IAAI,EACpC,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,2BAA4B,EAC9C,CAgBA,IAAK,GAAM,CAAC,EAAO,EAAM,GAAI,OAAO,OAAO,CAXvB,EAAW,MAAM,CAAC,CAAC,EAAQ,KACvB,WAAd,EAAK,KAAK,GACR,AAAC,CAAM,CAAC,EAAK,KAAK,CAAC,EACnB,CAAA,CAAM,CAAC,EAAK,KAAK,CAAC,CAAG,EAAE,AAAF,EAEzB,CAAM,CAAC,EAAK,KAAK,CAAC,CAAC,IAAI,CAAC,IAErB,GACR,CAAC,IAGsD,CACtD,IAAM,EAAW,SAAS,aAAa,CAAC,OACxC,EAAS,SAAS,CAAC,GAAG,CAAC,SACvB,EAAS,WAAW,CAAG,EACvB,IAAI,WAAW,CAAC,GAEhB,IAAM,EAAW,SAAS,aAAa,CAAC,MACxC,EAAM,OAAO,CAAC,AAAA,IACV,IAAM,EAAW,SAAS,aAAa,CAAC,MACxC,EAAS,SAAS,CAAC,GAAG,CAAC,QAEvB,IAAM,EAAO,SAAS,aAAa,CAAC,IACpC,CAAA,EAAK,IAAI,CAAG,EAAO,aAAa,CAChC,EAAK,WAAW,CAAG,EAAO,KAAK,CAE/B,EAAS,WAAW,CAAC,GACrB,EAAS,WAAW,CAAC,EACzB,GACA,IAAI,WAAW,CAAC,EACpB,CACJ,CAaA,SAAS,IAAI,CAAC,OAAO,CAAG,SAAS,CAAC,EAI9B,IAAK,IAHD,EAAU,EAAE,MAAM,CAAC,OAAO,CAAC,WAAW,GACtC,EAAiB,CAAC,MAAM,IAAI,CAEvB,EAAK,EAAG,EAAO,EAAe,MAAM,CAAE,IAC3C,GAAI,GAAW,CAAc,CAAC,EAAK,CAE/B,OAjBR,MAgBiB,EAAE,MAAM,EAfpB,IAAI,CAAC,AAAA,GAAY,EAAS,IAAI,IAC9B,IAAI,CAAC,AAAA,IACF,SAAS,aAAa,CAAC,WAAW,SAAS,CAAG,CAClD,GACC,KAAK,CAAC,AAAA,IACH,QAAQ,KAAK,CAAC,+BAAgC,EAClD,GAUW,CAAA,CAGnB,EAaA,SAAS,gBAAgB,CAAC,mBAAoB,IAAM,EADjC,yBAGnB,SAAS,cAAc,CAAC,eAAe,gBAAgB,CAAC,QAAS,IAAM,AAbvE,CAAA,WACI,IAAM,EAAc,SAAS,cAAc,CAAC,QAExC,AAA8B,CAAA,SAA9B,EAAY,KAAK,CAAC,OAAO,EAAe,AAA8B,KAA9B,EAAY,KAAK,CAAC,OAAO,CACjE,EAAY,KAAK,CAAC,OAAO,CAAG,QAE5B,EAAY,KAAK,CAAC,OAAO,CAAG,MAEpC,CAAA","sources":["<anon>","public/js/main.js"],"sourcesContent":["var $8c176e2ff2a9de30$exports = {};\n// this file requires marked and dompurity\nasync function $8c176e2ff2a9de30$var$loadRecipeTree(recipesDir) {\n    let recipeTree;\n    try {\n        const response = await fetch(recipesDir);\n        if (!response.ok) throw new Error('Network response was not ok!');\n        recipeTree = await response.json();\n    } catch (error) {\n        console.error('Error reading JSON file:', error);\n    }\n    // toc = document.getElementById(\"toc\");\n    // get the groups/type of recipe\n    const groupedData = recipeTree.reduce((groups, item)=>{\n        if (!(item.group == \"recipes\")) {\n            if (!groups[item.group]) groups[item.group] = [];\n            groups[item.group].push(item);\n        }\n        return groups;\n    }, {});\n    // Create table of contents\n    for (const [group, items] of Object.entries(groupedData)){\n        const groupDiv = document.createElement('div');\n        groupDiv.classList.add(\"group\");\n        groupDiv.textContent = group;\n        toc.appendChild(groupDiv);\n        const itemList = document.createElement('ul');\n        items.forEach((recipe)=>{\n            const listItem = document.createElement('li');\n            listItem.classList.add('item');\n            const link = document.createElement('a');\n            link.href = recipe.relative_path;\n            link.textContent = recipe.title;\n            listItem.appendChild(link);\n            itemList.appendChild(listItem);\n        });\n        toc.appendChild(itemList);\n    }\n}\nfunction $8c176e2ff2a9de30$var$loadHTML(filePath) {\n    fetch(filePath).then((response)=>response.text()).then((htmlContent)=>{\n        document.querySelector('#output').innerHTML = htmlContent;\n    }).catch((error)=>{\n        console.error('Error loading the HTML file:', error);\n    });\n}\ndocument.body.onclick = function(e) {\n    var tagType = e.target.tagName.toLowerCase();\n    var tagsToIdentify = [\n        'img',\n        'a'\n    ];\n    for(var tags = 0; tags < tagsToIdentify.length; tags++)if (tagType == tagsToIdentify[tags]) {\n        $8c176e2ff2a9de30$var$loadHTML(e.target);\n        return false; // cancels the link to page\n    }\n};\nfunction $8c176e2ff2a9de30$var$displayToc() {\n    const filesColumn = document.getElementById('files');\n    if (filesColumn.style.display === 'none' || filesColumn.style.display === '') filesColumn.style.display = 'block';\n    else filesColumn.style.display = 'none';\n}\nconst $8c176e2ff2a9de30$var$recipesDir = 'html_files_info.json';\ndocument.addEventListener(\"DOMContentLoaded\", ()=>$8c176e2ff2a9de30$var$loadRecipeTree($8c176e2ff2a9de30$var$recipesDir));\ndocument.getElementById('burger-menu').addEventListener('click', ()=>$8c176e2ff2a9de30$var$displayToc());\n\n\n//# sourceMappingURL=public.7e216a7f.js.map\n","// this file requires marked and dompurity\n\nasync function loadRecipeTree(recipesDir) {\n    let recipeTree;\n    try {\n        const response = await fetch(recipesDir);\n        if (!response.ok) {\n            throw new Error('Network response was not ok!');\n        }\n        recipeTree = await response.json();\n    } catch (error) {\n        console.error('Error reading JSON file:', error);\n    }\n\n    // toc = document.getElementById(\"toc\");\n\n    // get the groups/type of recipe\n    const groupedData = recipeTree.reduce((groups, item) => {\n        if (!(item.group == \"recipes\")) {\n            if (!groups[item.group]) {\n                groups[item.group] = [];\n            }\n            groups[item.group].push(item);\n        }\n        return groups;\n    }, {});\n\n    // Create table of contents\n    for (const [group, items] of Object.entries(groupedData)) {\n        const groupDiv = document.createElement('div');\n        groupDiv.classList.add(\"group\");\n        groupDiv.textContent = group;\n        toc.appendChild(groupDiv);\n\n        const itemList = document.createElement('ul');\n        items.forEach(recipe => {\n            const listItem = document.createElement('li');\n            listItem.classList.add('item');\n            \n            const link = document.createElement('a');\n            link.href = recipe.relative_path;\n            link.textContent = recipe.title;\n            \n            listItem.appendChild(link);\n            itemList.appendChild(listItem);\n        });\n        toc.appendChild(itemList);\n    };\n}\n\nfunction loadHTML(filePath) {\n    fetch(filePath)\n        .then(response => response.text())\n        .then(htmlContent => {\n            document.querySelector('#output').innerHTML = htmlContent;\n        })\n        .catch(error => {\n            console.error('Error loading the HTML file:', error);\n        });\n};\n\ndocument.body.onclick = function(e){\n    var tagType = e.target.tagName.toLowerCase();\n    var tagsToIdentify = ['img','a'];\n\n    for (var tags=0; tags < tagsToIdentify.length; tags++){\n        if (tagType == tagsToIdentify[tags]){\n            loadHTML(e.target);\n            return false; // cancels the link to page\n        }\n    }\n};\n\nfunction displayToc() {\n    const filesColumn = document.getElementById('files');\n\n    if (filesColumn.style.display === 'none' || filesColumn.style.display === '') {\n        filesColumn.style.display = 'block';\n    } else {\n        filesColumn.style.display = 'none';\n    }\n}\n\nconst recipesDir = 'html_files_info.json'\ndocument.addEventListener(\"DOMContentLoaded\", () => loadRecipeTree(recipesDir));\n\ndocument.getElementById('burger-menu').addEventListener('click', () => displayToc());"],"names":["$8c176e2ff2a9de30$var$loadRecipeTree","recipesDir","recipeTree","response","fetch","ok","Error","json","error","console","group","items","Object","entries","reduce","groups","item","push","groupDiv","document","createElement","classList","add","textContent","toc","appendChild","itemList","forEach","recipe","listItem","link","href","relative_path","title","body","onclick","e","tagType","target","tagName","toLowerCase","tagsToIdentify","tags","length","then","text","htmlContent","querySelector","innerHTML","catch","addEventListener","getElementById","$8c176e2ff2a9de30$var$displayToc","filesColumn","style","display"],"version":3,"file":"public.7e216a7f.js.map"}